{"version":3,"sources":["utils/types.ts","env.ts","utils/state.ts","components/Wallet.tsx","components/loans/helpers.ts","utils/transform.ts","utils/api.ts","lang.ts","components/toast.ts","components/accept.tsx","components/apply.tsx","components/guarantee.tsx","components/loans/accept_loans.tsx","components/loans/guarantee_loans.tsx","components/loans/investments.tsx","components/loans/my_loans.tsx","components/loans/index.tsx","components/repay.tsx","components/Home.tsx","components/testgen.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils/token.ts","utils/transaction.ts","constants.ts","utils/layout.ts"],"names":["success","value","error","failure","PROGRAM_ID","process","SOLANA_NETWORK_URL","Wallet","require","default","walletAdapter","WALLET_PROVIDER_URL","initialState","connection","Connection","SINGLE_GOSSIP","wallet","createStore","state","action","type","CONNECT","payload","DISCONNECT","undefined","dispatch","useGlobalState","WalletConnection","props","network","WALLET","urlWallet","useMemo","on","_","_publicKey","icon","intent","minimal","small","onClick","a","disconnect","connect","defaultProps","LoanStatus","unpackNumber","input","BN","LE","toNumber","unpackPublicKey","PublicKey","unpackOptionalPublicKey","array","Array","from","tag","slice","body","JSON","stringify","Uint8Array","unpackLoan","unpacked","LOAN_ACCOUNT_DATA_LAYOUT","decode","unpackedGuarantorPubkey","guarantorPubkey","toBase58","unpackedGuarantorRepaymentAccountPubkey","guarantorRepaymentAccountPubkey","unpackedCollateralAccountPubkey","collateralAccountPubkey","unpackedLenderPubkey","lenderPubkey","unpackedLenderRepaymentPubkey","lenderRepaymentPubkey","isInitialized","initializerPubkey","loanMintPubkey","initializerReceiveLoanPubkey","expectedAmount","amount","fetchLoanAccounts","params","loanProgramId","loanProgramIdKey","getProgramAccounts","SINGLE","getLoanAccounts","then","res","map","item","account","data","id","pubkey","fetchTokenAccounts","accountPublicKey","getParsedTokenAccountsByOwner","programId","TOKEN_PROGRAM_ID","getTokenAccounts","info","parsed","lamports","owner","REQUIRED","CONNECT_TO_WALLET","getStatusForUI","status","Pending","Initialized","Guaranteed","Accepted","Repaid","AppToaster","Toaster","create","className","position","Position","TOP","Accept","CONNECTION","loanId","useParams","React","useState","ifDoneHere","setIfDoneHere","loanQuery","loans","useQuery","LOAN","tokenQuery","publicKey","userTokens","TOKEN","isLoading","filteredLoans","filter","length","loan","gain","interestRate","availableAccounts","tokenAcc","mint","Number","tokenAmount","to","URL_INVESTMENTS","duration","Fragment","Intent","SUCCESS","initialValues","lenderFundsAccount","NONE","validate","values","errors","onSubmit","setSubmitting","acceptLoan","borrowerReceiveAccount","loanAccount","loanMintAccount","show","message","isSubmitting","htmlFor","as","name","uiAmount","component","disabled","Object","keys","Apply","URL_MY_LOANS","tokenAccount","initLoan","Guarantee","collateralAccount","guaranteeLoan","loanCollateralAccount","AcceptLoans","URL_ACCEPT","text","style","height","rightIcon","GuaranteeLoans","URL_GUARANTEE","Investments","getInvestmentType","investmentTypes","push","join","MyLoans","URL_REPAY","Loans","Component","filters","initializer","investor","includes","excludeStatus","Repay","loanRepaymentAccount","repayLoan","collateralTokenAccount","guarantorAccount","guarantorTokenAccount","lenderAccount","lenderTokenAccount","payerTokenAccount","BorrowerPanel","Classes","RUNNING_TEXT","GuarantorPanel","LenderPanel","Home","title","panel","URL_FAUCET","createMintAccounts","initialAccounts","transaction","Transaction","getMinimumBalanceForRentExemption","AccountLayout","span","minAmount","signers","forEach","add","SystemProgram","createAccount","fromPubkey","newAccountPubkey","space","initializeAccount","mintTo","destination","mintAuthority","signAndSendTransaction","TestGen","URL_APPLY","accounts","Account","result","remove","index","placeholder","large","App","borrowMenu","textDecoration","display","lenderMenu","URL_LOANS","maxWidth","marginBottom","Group","align","Alignment","LEFT","Heading","URL_HOME","RIGHT","content","placement","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","catch","e","queryClient","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById","LAYOUT","BufferLayout","union","u8","addVariant","struct","blob","nu64","instructionMaxSpan","Math","max","registry","r","encodeTokenInstructionData","instruction","b","Buffer","alloc","encode","isSigner","isWritable","SYSVAR_RENT_PUBKEY","TransactionInstruction","getRecentBlockhash","MAX","recentBlockhash","blockhash","setSigners","s","partialSign","signTransaction","rawTransaction","serialize","sendRawTransaction","preflightCommitment","loanMintAccountKey","loanReceiveAccount","applicationFee","APPLICATION_FEE","of","toArray","loanAccountKey","loanCollateralAccountKey","borrowerReceiveAccountKey","lenderFundsAccountKey","lenderRepaymentAccount","payerTokenAccountKey","collateralTokenAccountKey","guarantorAccountKey","guarantorTokenAccountKey","lenderAccountKey","lenderTokenAccountKey","findProgramAddress","pda","property","optionalPublicKey","uint64","u32"],"mappings":"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","file":"static/js/main.28e029a3.chunk.js","sourcesContent":["/** This interface is meant to be used as the output of a function\n * which has returned an error and no value.\n */\nexport interface Failure {\n  error: Error;\n  value: null;\n}\n\n/** This interface is meant to be used as the output of a function\n * which has returned an value and no error.\n */\nexport interface Success<T> {\n  error: null;\n  value: T;\n}\n\n/** This is a generic interface that describes the output (or ... Result) of\n * a function.\n *\n * A function can either return Success, or Failure.  The intention is to make\n * it clear that both Success and Failure must be considered and handled.\n *\n * Inspired by https://gdelgado.ca/type-safe-error-handling-in-typescript.html#title\n */\nexport type Result<T> = Success<T> | Failure;\n\n/** create a successful Result;\n *\n * @param value - the value to be passed on, well as the resolved value\n */\nexport function success<T>(value: T): Result<T> {\n  return {\n    error: null,\n    value,\n  };\n}\n\n/** creates a failed result\n *\n * @param error - an error; why the returned value did not resolve as expected\n */\nexport function failure(error: Error): Failure {\n  return {\n    error,\n    value: null,\n  };\n}\n","export const PROGRAM_ID: string | undefined = process.env.REACT_APP_PROGRAM_ID;\nexport const SOLANA_NETWORK_URL: string =\n  process.env.REACT_APP_SOLANA_NETWORK_URL || 'https://devnet.solana.com';\n","import { createStore } from 'react-hooks-global-state';\nimport { Connection } from '@solana/web3.js';\nimport { SOLANA_NETWORK_URL } from '../env';\nimport { CONNECT, DISCONNECT, SINGLE_GOSSIP, WALLET_PROVIDER_URL } from '../constants';\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-explicit-any */\nconst sol_adapter: any = require('@project-serum/sol-wallet-adapter');\n/* eslint-enable @typescript-eslint/no-var-requires, @typescript-eslint/no-explicit-any */\n\nexport const Wallet = sol_adapter.default;\nconst walletAdapter = new Wallet(WALLET_PROVIDER_URL);\n\nexport type WalletType = typeof Wallet;\n\ninterface State {\n  connection: Connection;\n  wallet: WalletType;\n}\n\ninterface WalletAction {\n  payload?: WalletType;\n  type: string;\n}\n\nexport const reducer = (state: State, action: WalletAction): State => {\n  switch (action.type) {\n    case CONNECT:\n      return { ...state, wallet: action.payload };\n    case DISCONNECT:\n      return { ...state, wallet: undefined };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  connection: new Connection(SOLANA_NETWORK_URL, SINGLE_GOSSIP),\n  wallet: walletAdapter,\n};\nconst { dispatch, useGlobalState } = createStore(reducer, initialState);\n\nexport { dispatch, useGlobalState };\n","import React, { useMemo } from 'react';\nimport { PublicKey } from '@solana/web3.js';\nimport { Button } from '@blueprintjs/core';\nimport { CONNECT, DISCONNECT, WALLET, WALLET_PROVIDER_URL } from '../constants';\nimport { dispatch, useGlobalState, Wallet } from '../utils/state';\nimport { SOLANA_NETWORK_URL } from '../env';\n\ninterface ConnectionProps {\n  network: string;\n}\n\nexport const WalletConnection = (props: ConnectionProps): JSX.Element => {\n  const { network } = props;\n  const [wallet] = useGlobalState(WALLET);\n  const urlWallet = useMemo(() => new Wallet(WALLET_PROVIDER_URL, network), [\n    WALLET_PROVIDER_URL,\n    network,\n  ]);\n\n  urlWallet.on(CONNECT, (_: PublicKey) => {\n    dispatch({ payload: urlWallet, type: CONNECT });\n    return;\n  });\n  urlWallet.on(DISCONNECT, () => {\n    dispatch({ type: DISCONNECT });\n    return;\n  });\n\n  return (\n    <div>\n      <div>\n        {wallet && wallet._publicKey ? (\n          <Button\n            icon=\"delete\"\n            intent=\"danger\"\n            minimal={true}\n            small={true}\n            onClick={async () => await urlWallet.disconnect()}\n          >\n            Disconnect\n          </Button>\n        ) : (\n          <Button\n            icon=\"power\"\n            intent=\"primary\"\n            minimal={true}\n            small={true}\n            onClick={async () => await urlWallet.connect()}\n          >\n            Connect\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst defaultProps: ConnectionProps = {\n  network: SOLANA_NETWORK_URL,\n};\n\nWalletConnection.defaultProps = defaultProps;\n","export enum LoanStatus {\n  Pending = 0,\n  Initialized = 1,\n  Guaranteed = 2,\n  Accepted = 3,\n  Repaid = 4,\n}\n\nexport const getStatusForUI = (status: number): string => {\n  switch (status) {\n    case LoanStatus.Pending:\n      return 'Pending';\n    case LoanStatus.Initialized:\n      return 'Initialized';\n    case LoanStatus.Guaranteed:\n      return 'Guaranteed';\n    case LoanStatus.Accepted:\n      return 'Accepted';\n    case LoanStatus.Repaid:\n      return 'Repaid';\n    default:\n      return 'Invalid';\n  }\n};\n","import { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { LOAN_ACCOUNT_DATA_LAYOUT } from './layout';\nimport type { LoanLayout, LoanData } from './layout';\nimport { LE } from '../constants';\n\nexport const unpackNumber = (input: Uint8Array): number => {\n  return new BN(input, 10, LE).toNumber();\n};\n\nexport const unpackPublicKey = (input: Uint8Array): PublicKey => {\n  return new PublicKey(input);\n};\n\nexport const unpackOptionalPublicKey = (input: Uint8Array): PublicKey | undefined => {\n  const array = Array.from(input);\n  const tag = array.slice(0, 4);\n  const body = array.slice(4);\n\n  if (JSON.stringify(tag) == JSON.stringify([1, 0, 0, 0])) {\n    return unpackPublicKey(Uint8Array.from(body));\n  } else {\n    return;\n  }\n};\n\nexport const unpackLoan = (input: Buffer): LoanData => {\n  const unpacked = LOAN_ACCOUNT_DATA_LAYOUT.decode(input) as LoanLayout;\n\n  const unpackedGuarantorPubkey = unpackOptionalPublicKey(unpacked.guarantorPubkey);\n  const guarantorPubkey = unpackedGuarantorPubkey ? unpackedGuarantorPubkey.toBase58() : undefined;\n  const unpackedGuarantorRepaymentAccountPubkey = unpackOptionalPublicKey(\n    unpacked.guarantorRepaymentAccountPubkey\n  );\n  const guarantorRepaymentAccountPubkey = unpackedGuarantorRepaymentAccountPubkey\n    ? unpackedGuarantorRepaymentAccountPubkey.toBase58()\n    : undefined;\n  const unpackedCollateralAccountPubkey = unpackOptionalPublicKey(unpacked.collateralAccountPubkey);\n  const collateralAccountPubkey = unpackedCollateralAccountPubkey\n    ? unpackedCollateralAccountPubkey.toBase58()\n    : undefined;\n  const unpackedLenderPubkey = unpackOptionalPublicKey(unpacked.lenderPubkey);\n  const lenderPubkey = unpackedLenderPubkey ? unpackedLenderPubkey.toBase58() : undefined;\n  const unpackedLenderRepaymentPubkey = unpackOptionalPublicKey(unpacked.lenderRepaymentPubkey);\n  const lenderRepaymentPubkey = unpackedLenderRepaymentPubkey\n    ? unpackedLenderRepaymentPubkey.toBase58()\n    : undefined;\n\n  const result = {\n    ...unpacked,\n    isInitialized: !!unpacked.isInitialized,\n    initializerPubkey: unpackPublicKey(unpacked.initializerPubkey).toBase58(),\n    loanMintPubkey: unpackPublicKey(unpacked.loanMintPubkey).toBase58(),\n    initializerReceiveLoanPubkey: unpackPublicKey(unpacked.initializerReceiveLoanPubkey).toBase58(),\n    guarantorPubkey,\n    guarantorRepaymentAccountPubkey,\n    collateralAccountPubkey,\n    lenderPubkey,\n    lenderRepaymentPubkey,\n    expectedAmount: unpackNumber(unpacked.expectedAmount),\n    amount: unpackNumber(unpacked.amount),\n  };\n\n  return result as LoanData;\n};\n","import { PublicKey } from '@solana/web3.js';\nimport type {\n  AccountInfo,\n  Connection,\n  ParsedAccountData,\n  PublicKeyAndAccount,\n  RpcResponseAndContext,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './token';\nimport { success, failure } from './types';\nimport type { Result } from './types';\nimport { unpackLoan } from './transform';\nimport type { LoanData } from './layout';\nimport { SINGLE } from '../constants';\n\ninterface GetLoanAccountsParams {\n  connection: Connection;\n  loanProgramId: string;\n}\n\nexport interface LoanAccount extends LoanData {\n  id: string;\n}\n\nexport interface LocalTokenAccount {\n  id: string;\n  info: {\n    isNative: boolean;\n    mint: string;\n    owner: string;\n    state: string;\n    tokenAmount: {\n      amount: string;\n      decimals: number;\n      uiAmount: number;\n    };\n  };\n  lamports: number;\n  owner: string;\n}\n\ninterface GetTokenAccountsParams {\n  accountPublicKey: PublicKey;\n  connection: Connection;\n}\n\ntype GetParsedTokenAccountsByOwnerResponse = RpcResponseAndContext<\n  {\n    pubkey: PublicKey;\n    account: AccountInfo<ParsedAccountData>;\n  }[]\n>;\n\nexport const fetchLoanAccounts = async (\n  params: GetLoanAccountsParams\n): Promise<Result<PublicKeyAndAccount<Buffer>[]>> => {\n  const { connection, loanProgramId } = params;\n  const loanProgramIdKey = new PublicKey(loanProgramId);\n  try {\n    return success(await connection.getProgramAccounts(loanProgramIdKey, SINGLE));\n  } catch (error) {\n    return failure(error);\n  }\n};\n\nexport const getLoanAccounts = async (params: GetLoanAccountsParams): Promise<LoanAccount[]> => {\n  return fetchLoanAccounts(params).then((res) => {\n    if (res.error) {\n      throw res.error;\n    }\n    return res.value.map((item) => {\n      return {\n        ...unpackLoan(item.account.data),\n        id: item.pubkey.toBase58(),\n      };\n    });\n  });\n};\n\nexport const fetchTokenAccounts = async (\n  params: GetTokenAccountsParams\n): Promise<Result<GetParsedTokenAccountsByOwnerResponse>> => {\n  const { accountPublicKey, connection } = params;\n  try {\n    return success(\n      await connection.getParsedTokenAccountsByOwner(\n        accountPublicKey,\n        { programId: TOKEN_PROGRAM_ID },\n        SINGLE\n      )\n    );\n  } catch (error) {\n    return failure(error);\n  }\n};\n\nexport const getTokenAccounts = async (\n  params: GetTokenAccountsParams\n): Promise<LocalTokenAccount[]> => {\n  return fetchTokenAccounts(params).then((res) => {\n    if (res.error) {\n      throw res.error;\n    }\n    return res.value.value.map((item) => {\n      return {\n        id: item.pubkey.toBase58(),\n        info: item.account.data.parsed.info,\n        lamports: item.account.lamports,\n        owner: item.account.owner.toBase58(),\n      };\n    });\n  });\n};\n","export const REQUIRED = 'Required';\nexport const INVALID_AMOUNT = 'Invalid amount';\nexport const CONNECT_TO_WALLET = 'Please connect to wallet.';\n","import { Position, Toaster } from '@blueprintjs/core';\n\n/** Singleton toaster instance. Create separate instances for different options. */\nexport const AppToaster = Toaster.create({\n  className: 'toaster',\n  position: Position.TOP,\n});\n","import React from 'react';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { Spinner, Callout, Card, H3, Intent } from '@blueprintjs/core';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useQuery } from 'react-query';\nimport { acceptLoan } from '../utils/transaction';\nimport { getLoanAccounts, getTokenAccounts } from '../utils/api';\nimport { useGlobalState } from '../utils/state';\nimport { CONNECTION, WALLET, LOAN, TOKEN, NONE, URL_INVESTMENTS } from '../constants';\nimport { CONNECT_TO_WALLET, REQUIRED } from '../lang';\nimport { PROGRAM_ID } from '../env';\nimport { LoanStatus, getStatusForUI } from './loans/helpers';\nimport { AppToaster } from './toast';\n\nconst Accept = (): JSX.Element => {\n  const [wallet] = useGlobalState(WALLET);\n  const [connection] = useGlobalState(CONNECTION);\n  const { loanId } = useParams<{ loanId: string }>();\n  const [ifDoneHere, setIfDoneHere] = React.useState<boolean>(false);\n\n  const loanQuery = async () => getLoanAccounts({ loanProgramId: PROGRAM_ID || '', connection });\n  const loans = useQuery(LOAN, loanQuery);\n  const tokenQuery =\n    wallet && wallet._publicKey\n      ? async () => getTokenAccounts({ accountPublicKey: wallet.publicKey, connection })\n      : async () => [];\n  const userTokens = useQuery(TOKEN, tokenQuery);\n\n  if (!PROGRAM_ID) {\n    return <span>Invalid Program ID</span>;\n  }\n\n  if (!wallet || !wallet._publicKey) {\n    return (\n      <div className=\"column\">\n        <span>{CONNECT_TO_WALLET}</span>\n      </div>\n    );\n  }\n\n  if (loans.isLoading || userTokens.isLoading) {\n    return <Spinner />;\n  }\n\n  if (loans.error || userTokens.error) {\n    return <span>Error...</span>;\n  }\n\n  const filteredLoans = loans.data?.filter((item) => item.id === loanId);\n\n  if (!filteredLoans || filteredLoans.length < 1) {\n    return <p>Not found</p>;\n  }\n\n  const loan = filteredLoans[0];\n  const gain = loan.expectedAmount * (loan.interestRate / 100);\n\n  const availableAccounts = userTokens.data?.filter(\n    (tokenAcc) =>\n      tokenAcc.info.mint === loan.loanMintPubkey &&\n      Number(tokenAcc.info.tokenAmount.amount) >= loan.expectedAmount\n  );\n\n  return (\n    <div className=\"column\">\n      {ifDoneHere && <Redirect to={URL_INVESTMENTS} />}\n      <Card>\n        <H3>Lend Money</H3>\n        {loan.status === LoanStatus.Guaranteed && (\n          <p>Please confirm that you want to accept to lend for the loan with the details below.</p>\n        )}\n        <table>\n          <tbody>\n            <tr>\n              <th>ID</th>\n              <td>{loan.id}</td>\n            </tr>\n            <tr>\n              <th>Initializer</th>\n              <td>{loan.initializerPubkey}</td>\n            </tr>\n            <tr>\n              <th>Token ID</th>\n              <td>{loan.loanMintPubkey}</td>\n            </tr>\n            <tr>\n              <th>Amount</th>\n              <td>{loan.expectedAmount}</td>\n            </tr>\n            <tr>\n              <th>Duration</th>\n              <td>{loan.duration} hours</td>\n            </tr>\n            <tr>\n              <th>APR</th>\n              <td>{loan.interestRate}%</td>\n            </tr>\n            <tr>\n              <th>Status</th>\n              <td>{getStatusForUI(loan.status)}</td>\n            </tr>\n            {loan.status >= LoanStatus.Guaranteed && (\n              <tr>\n                <th>Guarantor</th>\n                <td>{loan.guarantorPubkey}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n        {loan.status === LoanStatus.Guaranteed ? (\n          <React.Fragment>\n            <Callout intent={Intent.SUCCESS}>\n              You stand to gain <strong>50%</strong> of the APR which is <strong>{gain}</strong>\n              <br />\n              This will be transferred to your account as tokens of the Token ID indicated above.\n            </Callout>\n            <br />\n            <h3 className=\"bp3-heading\">Accept Loan</h3>\n            <Formik\n              initialValues={{ lenderFundsAccount: NONE }}\n              validate={(values) => {\n                const errors: { amount?: string; lenderFundsAccount?: string } = {};\n                if (!values.lenderFundsAccount || values.lenderFundsAccount == NONE) {\n                  errors.lenderFundsAccount = REQUIRED;\n                }\n                return errors;\n              }}\n              onSubmit={async (values, { setSubmitting }) => {\n                await acceptLoan({\n                  connection,\n                  borrowerReceiveAccount: loan.initializerReceiveLoanPubkey,\n                  lenderFundsAccount: values.lenderFundsAccount,\n                  loanAccount: loan.id,\n                  loanProgramId: PROGRAM_ID ? PROGRAM_ID : '',\n                  loanMintAccount: loan.loanMintPubkey,\n                  wallet,\n                });\n                AppToaster.show({\n                  message: 'Success! Please wait up to 30 seconds for changes to take place.',\n                });\n                setSubmitting(false);\n                setIfDoneHere(true);\n              }}\n            >\n              {({ isSubmitting, errors }) => (\n                <Form>\n                  <label htmlFor=\"lenderFundsAccount\">Loan Funds Account</label>\n                  <p>\n                    Select a token account to use as a source of funds for this loan. Only accounts\n                    of the same token as the loan and with sufficient token balance are avilable\n                    below.\n                  </p>\n                  <Field as=\"select\" id=\"lenderFundsAccount\" name=\"lenderFundsAccount\">\n                    <option value=\"none\">--select--</option>\n                    {availableAccounts &&\n                      availableAccounts.length > 0 &&\n                      availableAccounts.map((account) => (\n                        <option key={account.id} value={account.id}>\n                          {account.id} {'//'} {account.info.tokenAmount.uiAmount}\n                        </option>\n                      ))}\n                  </Field>\n                  <ErrorMessage name=\"lenderFundsAccount\" component=\"p\" />\n                  <button\n                    type=\"submit\"\n                    disabled={\n                      isSubmitting ||\n                      !wallet ||\n                      !wallet._publicKey ||\n                      Object.keys(errors).length > 0\n                    }\n                  >\n                    Submit\n                  </button>\n                </Form>\n              )}\n            </Formik>\n          </React.Fragment>\n        ) : (\n          <p>You cannot provide funds towards this loan.</p>\n        )}\n      </Card>\n    </div>\n  );\n};\n\nexport { Accept };\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Spinner, Callout } from '@blueprintjs/core';\nimport { useQuery } from 'react-query';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { initLoan } from '../utils/transaction';\nimport { getTokenAccounts } from '../utils/api';\nimport { useGlobalState } from '../utils/state';\nimport { CONNECTION, WALLET, TOKEN, NONE, URL_MY_LOANS } from '../constants';\nimport { PROGRAM_ID } from '../env';\nimport { REQUIRED, INVALID_AMOUNT, CONNECT_TO_WALLET } from '../lang';\nimport { AppToaster } from './toast';\n\nconst Apply = (): JSX.Element => {\n  const [wallet] = useGlobalState(WALLET);\n  const [connection] = useGlobalState(CONNECTION);\n  const [ifDoneHere, setIfDoneHere] = React.useState<boolean>(false);\n\n  const tokenQuery =\n    wallet && wallet._publicKey\n      ? async () => getTokenAccounts({ accountPublicKey: wallet.publicKey, connection })\n      : async () => [];\n  const { isLoading, error, data } = useQuery(TOKEN, tokenQuery);\n\n  if (!PROGRAM_ID) {\n    return <span>Invalid Program ID</span>;\n  }\n\n  if (!wallet || !wallet._publicKey) {\n    return (\n      <div className=\"column\">\n        <span>{CONNECT_TO_WALLET}</span>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return <Spinner />;\n  }\n\n  if (error) {\n    return <span>Error...</span>;\n  }\n\n  return (\n    <div className=\"column\">\n      {ifDoneHere && <Redirect to={URL_MY_LOANS} />}\n      <h3 className=\"bp3-heading\">Apply For Loan</h3>\n      <Callout intent=\"primary\">\n        Fill in the form below to apply for a loan.\n        <br />\n        You will need to select a token account that will be used to pay for the loan application\n        fee. This account will also determine the type of token to be used for the loan.\n      </Callout>\n      <Formik\n        initialValues={{ amount: 599, tokenAccount: NONE }}\n        validate={(values) => {\n          const errors: { amount?: string; tokenAccount?: string } = {};\n          if (!values.amount) {\n            errors.amount = REQUIRED;\n          } else if (values.amount < 100) {\n            errors.amount = INVALID_AMOUNT;\n          }\n          if (!values.tokenAccount || values.tokenAccount == NONE) {\n            errors.tokenAccount = REQUIRED;\n          }\n          return errors;\n        }}\n        onSubmit={async (values, { setSubmitting }) => {\n          await initLoan({\n            connection,\n            expectedAmount: values.amount,\n            loanProgramId: PROGRAM_ID ? PROGRAM_ID : '',\n            loanMintAccount: values.tokenAccount,\n            wallet,\n          });\n          AppToaster.show({\n            message: 'Success! Please wait up to 30 seconds for changes to take place.',\n          });\n          setSubmitting(false);\n          setIfDoneHere(true);\n        }}\n      >\n        {({ isSubmitting, errors }) => (\n          <Form>\n            <label htmlFor=\"amount\">Amount</label>\n            <Field id=\"amount\" type=\"number\" name=\"amount\" />\n            <ErrorMessage name=\"amount\" component=\"p\" />\n            <label htmlFor=\"tokenAccount\">Token Account</label>\n            <Field as=\"select\" id=\"tokenAccount\" name=\"tokenAccount\">\n              <option value=\"none\">--select--</option>\n              {data &&\n                data.length > 0 &&\n                data.map((account) => (\n                  <option key={account.id} value={account.info.mint}>\n                    {account.id} {'//'} {account.info.tokenAmount.uiAmount}\n                  </option>\n                ))}\n            </Field>\n            <ErrorMessage name=\"tokenAccount\" component=\"p\" />\n            <button\n              type=\"submit\"\n              disabled={\n                isSubmitting || !wallet || !wallet._publicKey || Object.keys(errors).length > 0\n              }\n            >\n              Submit\n            </button>\n            {(!wallet || !wallet._publicKey) && <p>{CONNECT_TO_WALLET}</p>}\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport { Apply };\n","import React from 'react';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { Spinner, Callout, Card, H3, Intent } from '@blueprintjs/core';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useQuery } from 'react-query';\nimport { guaranteeLoan } from '../utils/transaction';\nimport { getLoanAccounts, getTokenAccounts } from '../utils/api';\nimport { useGlobalState } from '../utils/state';\nimport { CONNECTION, WALLET, LOAN, TOKEN, NONE, URL_INVESTMENTS } from '../constants';\nimport { CONNECT_TO_WALLET, REQUIRED } from '../lang';\nimport { PROGRAM_ID } from '../env';\nimport { LoanStatus, getStatusForUI } from './loans/helpers';\nimport { AppToaster } from './toast';\n\nconst Guarantee = (): JSX.Element => {\n  const [wallet] = useGlobalState(WALLET);\n  const [connection] = useGlobalState(CONNECTION);\n  const { loanId } = useParams<{ loanId: string }>();\n  const [ifDoneHere, setIfDoneHere] = React.useState<boolean>(false);\n\n  const loanQuery = async () => getLoanAccounts({ loanProgramId: PROGRAM_ID || '', connection });\n  const loans = useQuery(LOAN, loanQuery);\n  const tokenQuery =\n    wallet && wallet._publicKey\n      ? async () => getTokenAccounts({ accountPublicKey: wallet.publicKey, connection })\n      : async () => [];\n  const userTokens = useQuery(TOKEN, tokenQuery);\n\n  if (!PROGRAM_ID) {\n    return <span>Invalid Program ID</span>;\n  }\n\n  if (!wallet || !wallet._publicKey) {\n    return (\n      <div className=\"column\">\n        <span>{CONNECT_TO_WALLET}</span>\n      </div>\n    );\n  }\n\n  if (loans.isLoading || userTokens.isLoading) {\n    return <Spinner />;\n  }\n\n  if (loans.error || userTokens.error) {\n    return <span>Error...</span>;\n  }\n\n  const filteredLoans = loans.data?.filter((item) => item.id === loanId);\n\n  if (!filteredLoans || filteredLoans.length < 1) {\n    return <p>Not found</p>;\n  }\n\n  const loan = filteredLoans[0];\n  const gain = loan.expectedAmount * (loan.interestRate / 100);\n\n  const availableAccounts = userTokens.data?.filter(\n    (tokenAcc) =>\n      tokenAcc.info.mint === loan.loanMintPubkey &&\n      Number(tokenAcc.info.tokenAmount.amount) >= loan.expectedAmount\n  );\n\n  return (\n    <div className=\"column\">\n      {ifDoneHere && <Redirect to={URL_INVESTMENTS} />}\n      <Card>\n        <H3>Guarantee Loan</H3>\n        {loan.status === LoanStatus.Initialized && (\n          <p>Please confirm that you want to provide the collateral for this loan.</p>\n        )}\n        <table>\n          <tbody>\n            <tr>\n              <th>ID</th>\n              <td>{loan.id}</td>\n            </tr>\n            <tr>\n              <th>Initializer</th>\n              <td>{loan.initializerPubkey}</td>\n            </tr>\n            <tr>\n              <th>Token ID</th>\n              <td>{loan.loanMintPubkey}</td>\n            </tr>\n            <tr>\n              <th>Amount</th>\n              <td>{loan.expectedAmount}</td>\n            </tr>\n            <tr>\n              <th>Duration</th>\n              <td>{loan.duration} hours</td>\n            </tr>\n            <tr>\n              <th>APR</th>\n              <td>{loan.interestRate}%</td>\n            </tr>\n            {loan.status !== LoanStatus.Initialized && (\n              <tr>\n                <th>Status</th>\n                <td>{getStatusForUI(loan.status)}</td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n        {loan.status === LoanStatus.Initialized ? (\n          <React.Fragment>\n            <Callout intent={Intent.SUCCESS}>\n              You stand to gain <strong>50%</strong> of the APR which is <strong>{gain}</strong>\n              <br />\n              This will be transferred to your account as tokens of the Token ID indicated above.\n            </Callout>\n            <br />\n            <h3 className=\"bp3-heading\">Guarantee Loan</h3>\n            <Formik\n              initialValues={{ collateralAccount: NONE }}\n              validate={(values) => {\n                const errors: { amount?: string; collateralAccount?: string } = {};\n                if (!values.collateralAccount || values.collateralAccount == NONE) {\n                  errors.collateralAccount = REQUIRED;\n                }\n                return errors;\n              }}\n              onSubmit={async (values, { setSubmitting }) => {\n                await guaranteeLoan({\n                  connection,\n                  loanMintAccount: loan.loanMintPubkey,\n                  loanCollateralAccount: values.collateralAccount,\n                  loanAccount: loan.id,\n                  loanProgramId: PROGRAM_ID ? PROGRAM_ID : '',\n                  wallet,\n                });\n                AppToaster.show({\n                  message: 'Success! Please wait up to 30 seconds for changes to take place.',\n                });\n                setSubmitting(false);\n                setIfDoneHere(true);\n              }}\n            >\n              {({ isSubmitting, errors }) => (\n                <Form>\n                  <label htmlFor=\"collateralAccount\">Collateral Account</label>\n                  <p>\n                    Select a token account to use as collateral for this loan. Only accounts of the\n                    same token as the loan and with sufficient token balance are available below.\n                  </p>\n                  <Field as=\"select\" id=\"collateralAccount\" name=\"collateralAccount\">\n                    <option value=\"none\">--select--</option>\n                    {availableAccounts &&\n                      availableAccounts.length > 0 &&\n                      availableAccounts.map((account) => (\n                        <option key={account.id} value={account.id}>\n                          {account.id} {'//'} {account.info.tokenAmount.uiAmount}\n                        </option>\n                      ))}\n                  </Field>\n                  <ErrorMessage name=\"collateralAccount\" component=\"p\" />\n                  <button\n                    type=\"submit\"\n                    disabled={\n                      isSubmitting ||\n                      !wallet ||\n                      !wallet._publicKey ||\n                      Object.keys(errors).length > 0\n                    }\n                  >\n                    Submit\n                  </button>\n                </Form>\n              )}\n            </Formik>\n          </React.Fragment>\n        ) : (\n          <p>You cannot provide collateral for this loan.</p>\n        )}\n      </Card>\n    </div>\n  );\n};\n\nexport { Guarantee };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, HTMLTable, H3 } from '@blueprintjs/core';\nimport { useGlobalState } from '../../utils/state';\nimport type { LoanAccount } from '../../utils/api';\nimport { getStatusForUI } from './helpers';\nimport { URL_ACCEPT, WALLET } from '../../constants';\n\ninterface Props {\n  loans: LoanAccount[];\n}\n\nconst AcceptLoans = (props: Props): JSX.Element => {\n  const { loans } = props;\n  const [wallet] = useGlobalState(WALLET);\n  return (\n    <div className=\"accept\">\n      <H3>Lend Funds</H3>\n      {loans.length > 0 ? (\n        <HTMLTable>\n          <tbody>\n            <tr>\n              <th>ID</th>\n              <th>Amount</th>\n              <th>Duration (hours)</th>\n              <th>APR</th>\n              <th>Status</th>\n              {wallet && wallet._publicKey && <th>Action</th>}\n            </tr>\n            {loans.map((loan) => (\n              <tr key={loan.id}>\n                <td>{loan.id}</td>\n                <td>{loan.expectedAmount}</td>\n                <td>{loan.duration}</td>\n                <td>{loan.interestRate}%</td>\n                <td>{getStatusForUI(loan.status)}</td>\n                {wallet && wallet._publicKey && (\n                  <td>\n                    <Link to={`${URL_ACCEPT}/${loan.id}`}>\n                      <Button\n                        text=\"  \"\n                        small={true}\n                        minimal={true}\n                        style={{ height: '20px' }}\n                        rightIcon=\"arrow-right\"\n                        intent=\"success\"\n                      />\n                    </Link>\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </HTMLTable>\n      ) : (\n        <p>No loans are currently available</p>\n      )}\n    </div>\n  );\n};\n\nexport { AcceptLoans };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, HTMLTable, H3 } from '@blueprintjs/core';\nimport { useGlobalState } from '../../utils/state';\nimport type { LoanAccount } from '../../utils/api';\nimport { getStatusForUI } from './helpers';\nimport { URL_GUARANTEE, WALLET } from '../../constants';\n\ninterface Props {\n  loans: LoanAccount[];\n}\n\nconst GuaranteeLoans = (props: Props): JSX.Element => {\n  const { loans } = props;\n  const [wallet] = useGlobalState(WALLET);\n  return (\n    <div className=\"guarantee\">\n      <H3>Provide Collateral</H3>\n      {loans.length > 0 ? (\n        <HTMLTable>\n          <tbody>\n            <tr>\n              <th>ID</th>\n              <th>Amount</th>\n              <th>Duration (hours)</th>\n              <th>APR</th>\n              <th>Status</th>\n              {wallet && wallet._publicKey && <th>Action</th>}\n            </tr>\n            {loans.map((loan) => (\n              <tr key={loan.id}>\n                <td>{loan.id}</td>\n                <td>{loan.expectedAmount}</td>\n                <td>{loan.duration}</td>\n                <td>{loan.interestRate}%</td>\n                <td>{getStatusForUI(loan.status)}</td>\n                {wallet && wallet._publicKey && (\n                  <td>\n                    <Link to={`${URL_GUARANTEE}/${loan.id}`}>\n                      <Button\n                        text=\"  \"\n                        small={true}\n                        minimal={true}\n                        style={{ height: '20px' }}\n                        rightIcon=\"arrow-right\"\n                        intent=\"success\"\n                      />\n                    </Link>\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </HTMLTable>\n      ) : (\n        <p>No loans are currently available</p>\n      )}\n    </div>\n  );\n};\n\nexport { GuaranteeLoans };\n","import React from 'react';\nimport { HTMLTable, H3 } from '@blueprintjs/core';\nimport { useGlobalState } from '../../utils/state';\nimport type { LoanAccount } from '../../utils/api';\nimport { getStatusForUI } from './helpers';\nimport { WALLET } from '../../constants';\n\ninterface Props {\n  loans: LoanAccount[];\n}\n\nconst Investments = (props: Props): JSX.Element => {\n  const { loans } = props;\n  const [wallet] = useGlobalState(WALLET);\n\n  const getInvestmentType = (loan: LoanAccount): string => {\n    const investmentTypes: string[] = [];\n    if (loan.guarantorPubkey === wallet.publicKey.toBase58()) {\n      investmentTypes.push('Guarantor');\n    }\n    if (loan.lenderPubkey === wallet.publicKey.toBase58()) {\n      investmentTypes.push('Lender');\n    }\n    return investmentTypes.join(', ');\n  };\n\n  return (\n    <div className=\"my-investments\">\n      <H3>My Investments</H3>\n      {loans.length > 0 ? (\n        <HTMLTable>\n          <tbody>\n            <tr>\n              <th>ID</th>\n              <th>Amount</th>\n              <th>Duration (hours)</th>\n              <th>APR</th>\n              <th>Status</th>\n              {wallet && wallet._publicKey && <th>Type</th>}\n            </tr>\n            {loans.map((loan) => (\n              <tr key={loan.id}>\n                <td>{loan.id}</td>\n                <td>{loan.expectedAmount}</td>\n                <td>{loan.duration}</td>\n                <td>{loan.interestRate}%</td>\n                <td>{getStatusForUI(loan.status)}</td>\n                {wallet && wallet._publicKey && <td>{getInvestmentType(loan)}</td>}\n              </tr>\n            ))}\n          </tbody>\n        </HTMLTable>\n      ) : (\n        <p>No loans are currently available</p>\n      )}\n    </div>\n  );\n};\n\nexport { Investments };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, HTMLTable, H3 } from '@blueprintjs/core';\nimport { useGlobalState } from '../../utils/state';\nimport type { LoanAccount } from '../../utils/api';\nimport { getStatusForUI, LoanStatus } from './helpers';\nimport { URL_REPAY, WALLET } from '../../constants';\n\ninterface Props {\n  loans: LoanAccount[];\n}\n\nconst MyLoans = (props: Props): JSX.Element => {\n  const { loans } = props;\n  const [wallet] = useGlobalState(WALLET);\n  return (\n    <div className=\"my-loans\">\n      <H3>My Loans</H3>\n      {loans.length > 0 ? (\n        <HTMLTable>\n          <tbody>\n            <tr>\n              <th>ID</th>\n              <th>Amount</th>\n              <th>Duration (hours)</th>\n              <th>APR</th>\n              <th>Status</th>\n              {wallet && wallet._publicKey && <th>Action</th>}\n            </tr>\n            {loans.map((loan) => (\n              <tr key={loan.id}>\n                <td>{loan.id}</td>\n                <td>{loan.expectedAmount}</td>\n                <td>{loan.duration}</td>\n                <td>{loan.interestRate}%</td>\n                <td>{getStatusForUI(loan.status)}</td>\n                {wallet && wallet._publicKey && (\n                  <td>\n                    {loan.status === LoanStatus.Accepted && (\n                      <Link to={`${URL_REPAY}/${loan.id}`}>\n                        <Button\n                          text=\"Repay\"\n                          small={true}\n                          minimal={true}\n                          style={{ height: '20px' }}\n                          rightIcon=\"arrow-right\"\n                          intent=\"success\"\n                        />\n                      </Link>\n                    )}\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </HTMLTable>\n      ) : (\n        <p>No loans are currently available</p>\n      )}\n    </div>\n  );\n};\n\nexport { MyLoans };\n","import React from 'react';\nimport { Spinner, HTMLTable } from '@blueprintjs/core';\nimport { useQuery } from 'react-query';\nimport { getLoanAccounts } from '../../utils/api';\nimport type { LoanAccount } from '../../utils/api';\nimport { useGlobalState } from '../../utils/state';\nimport { CONNECTION, LOAN } from '../../constants';\nimport { LoanStatus, getStatusForUI } from './helpers';\nexport * from './accept_loans';\nexport * from './guarantee_loans';\nexport * from './investments';\nexport * from './my_loans';\n\ninterface Filters {\n  excludeStatus?: LoanStatus[];\n  initializer?: string;\n  investor?: string;\n  status?: LoanStatus[];\n}\n\ninterface Props {\n  Component?: React.ElementType;\n  filters?: Filters;\n  loanProgramId: string;\n}\n\nconst Loans = (props: Props): JSX.Element => {\n  const { Component, loanProgramId } = props;\n  const [connection] = useGlobalState(CONNECTION);\n  const loanQuery = async () => getLoanAccounts({ loanProgramId, connection });\n  const { isLoading, error, data } = useQuery(LOAN, loanQuery);\n\n  const { filters } = props;\n\n  if (isLoading) {\n    return <Spinner />;\n  }\n\n  if (error) {\n    return <span>Error...</span>;\n  }\n\n  let loans: LoanAccount[] = data || [];\n  if (filters) {\n    if (filters.initializer) {\n      loans = loans.filter((item) => item.initializerPubkey === filters.initializer);\n    }\n    if (filters.investor) {\n      loans = loans.filter(\n        (item) =>\n          item.guarantorPubkey === filters.investor || item.lenderPubkey === filters.investor\n      );\n    }\n    if (filters.status) {\n      loans = loans.filter((item) => filters.status?.includes(item.status));\n    }\n    if (filters.excludeStatus) {\n      loans = loans.filter((item) => !filters.excludeStatus?.includes(item.status));\n    }\n  }\n\n  if (Component) {\n    return (\n      <div className=\"column\">\n        <Component loans={loans} />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"column\">\n        <HTMLTable>\n          <tbody>\n            <tr>\n              <th>ID</th>\n              <th>Amount</th>\n              <th>Duration (hours)</th>\n              <th>APR</th>\n              <th>Status</th>\n            </tr>\n            {loans.map((loan) => (\n              <tr key={loan.id}>\n                <td>{loan.id}</td>\n                <td>{loan.expectedAmount}</td>\n                <td>{loan.duration}</td>\n                <td>{loan.interestRate}%</td>\n                <td>{getStatusForUI(loan.status)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </HTMLTable>\n      </div>\n    );\n  }\n};\n\nexport { Loans };\n","import React from 'react';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { Spinner, Callout, Card, H3, Intent } from '@blueprintjs/core';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useQuery } from 'react-query';\nimport { repayLoan } from '../utils/transaction';\nimport { getLoanAccounts, getTokenAccounts } from '../utils/api';\nimport { useGlobalState } from '../utils/state';\nimport { CONNECTION, WALLET, LOAN, TOKEN, NONE, URL_MY_LOANS } from '../constants';\nimport { CONNECT_TO_WALLET, REQUIRED } from '../lang';\nimport { PROGRAM_ID } from '../env';\nimport { LoanStatus, getStatusForUI } from './loans/helpers';\nimport { AppToaster } from './toast';\n\nconst Repay = (): JSX.Element => {\n  const [wallet] = useGlobalState(WALLET);\n  const [connection] = useGlobalState(CONNECTION);\n  const { loanId } = useParams<{ loanId: string }>();\n  const [ifDoneHere, setIfDoneHere] = React.useState<boolean>(false);\n\n  const loanQuery = async () => getLoanAccounts({ loanProgramId: PROGRAM_ID || '', connection });\n  const loans = useQuery(LOAN, loanQuery);\n  const tokenQuery =\n    wallet && wallet._publicKey\n      ? async () => getTokenAccounts({ accountPublicKey: wallet.publicKey, connection })\n      : async () => [];\n  const userTokens = useQuery(TOKEN, tokenQuery);\n\n  if (!PROGRAM_ID) {\n    return <span>Invalid Program ID</span>;\n  }\n\n  if (!wallet || !wallet._publicKey) {\n    return (\n      <div className=\"column\">\n        <span>{CONNECT_TO_WALLET}</span>\n      </div>\n    );\n  }\n\n  if (loans.isLoading || userTokens.isLoading) {\n    return <Spinner />;\n  }\n\n  if (loans.error || userTokens.error) {\n    return <span>Error...</span>;\n  }\n\n  const filteredLoans = loans.data?.filter((item) => item.id === loanId);\n\n  if (!filteredLoans || filteredLoans.length < 1) {\n    return <p>Not found</p>;\n  }\n\n  const loan = filteredLoans[0];\n\n  const availableAccounts = userTokens.data?.filter(\n    (tokenAcc) =>\n      tokenAcc.info.mint === loan.loanMintPubkey &&\n      Number(tokenAcc.info.tokenAmount.amount) >= loan.expectedAmount\n  );\n\n  return (\n    <div className=\"column\">\n      {ifDoneHere && <Redirect to={URL_MY_LOANS} />}\n      <Card>\n        <H3>Repay Loan</H3>\n        {loan.status === LoanStatus.Accepted && (\n          <p>Please confirm that you want to repay this loan.</p>\n        )}\n        <table>\n          <tbody>\n            <tr>\n              <th>ID</th>\n              <td>{loan.id}</td>\n            </tr>\n            <tr>\n              <th>Initializer</th>\n              <td>{loan.initializerPubkey}</td>\n            </tr>\n            <tr>\n              <th>Token ID</th>\n              <td>{loan.loanMintPubkey}</td>\n            </tr>\n            <tr>\n              <th>Amount Borrowed</th>\n              <td>{loan.expectedAmount}</td>\n            </tr>\n            <tr>\n              <th>Amount To Repay</th>\n              <td>{loan.amount}</td>\n            </tr>\n            <tr>\n              <th>Duration</th>\n              <td>{loan.duration} hours</td>\n            </tr>\n            <tr>\n              <th>APR</th>\n              <td>{loan.interestRate}%</td>\n            </tr>\n            <tr>\n              <th>Status</th>\n              <td>{getStatusForUI(loan.status)}</td>\n            </tr>\n            {loan.status >= LoanStatus.Guaranteed && (\n              <React.Fragment>\n                <tr>\n                  <th>Guarantor</th>\n                  <td>{loan.guarantorPubkey}</td>\n                </tr>\n                <tr>\n                  <th>Lender</th>\n                  <td>{loan.lenderPubkey}</td>\n                </tr>\n              </React.Fragment>\n            )}\n          </tbody>\n        </table>\n        {loan.status === LoanStatus.Accepted ? (\n          <React.Fragment>\n            <Callout intent={Intent.SUCCESS}>\n              This action will completely repay this loan.\n              <br />\n              You will need to repay <strong>{loan.amount}</strong>.\n            </Callout>\n            <br />\n            <h3 className=\"bp3-heading\">Repay Loan</h3>\n            <Formik\n              initialValues={{ loanRepaymentAccount: NONE }}\n              validate={(values) => {\n                const errors: { amount?: string; loanRepaymentAccount?: string } = {};\n                if (!values.loanRepaymentAccount || values.loanRepaymentAccount == NONE) {\n                  errors.loanRepaymentAccount = REQUIRED;\n                }\n                return errors;\n              }}\n              onSubmit={async (values, { setSubmitting }) => {\n                await repayLoan({\n                  collateralTokenAccount: loan.collateralAccountPubkey || '',\n                  connection,\n                  guarantorAccount: loan.guarantorPubkey || '',\n                  guarantorTokenAccount: loan.guarantorRepaymentAccountPubkey || '',\n                  lenderAccount: loan.lenderPubkey || '',\n                  lenderTokenAccount: loan.lenderRepaymentPubkey || '',\n                  loanAccount: loan.id,\n                  loanProgramId: PROGRAM_ID ? PROGRAM_ID : '',\n                  payerTokenAccount: values.loanRepaymentAccount,\n                  wallet,\n                });\n                AppToaster.show({\n                  message: 'Success! Please wait up to 30 seconds for changes to take place.',\n                });\n                setSubmitting(false);\n                setIfDoneHere(true);\n              }}\n            >\n              {({ isSubmitting, errors }) => (\n                <Form>\n                  <label htmlFor=\"loanRepaymentAccount\">Loan Repayment Account</label>\n                  <p>\n                    Select a token account to use as a source of funds for repaying this loan. Only\n                    accounts of the same token as the loan and with sufficient token balance are\n                    available below.\n                  </p>\n                  <Field as=\"select\" id=\"loanRepaymentAccount\" name=\"loanRepaymentAccount\">\n                    <option value=\"none\">--select--</option>\n                    {availableAccounts &&\n                      availableAccounts.length > 0 &&\n                      availableAccounts.map((account) => (\n                        <option key={account.id} value={account.id}>\n                          {account.id} {'//'} {account.info.tokenAmount.uiAmount}\n                        </option>\n                      ))}\n                  </Field>\n                  <ErrorMessage name=\"loanRepaymentAccount\" component=\"p\" />\n                  <button\n                    type=\"submit\"\n                    disabled={\n                      isSubmitting ||\n                      !wallet ||\n                      !wallet._publicKey ||\n                      Object.keys(errors).length > 0\n                    }\n                  >\n                    Submit\n                  </button>\n                </Form>\n              )}\n            </Formik>\n          </React.Fragment>\n        ) : (\n          <p>You cannot repay this loan.</p>\n        )}\n      </Card>\n    </div>\n  );\n};\n\nexport { Repay };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Callout, Classes, Button, H3, H4, H5, Tab, Tabs } from '@blueprintjs/core';\nimport { WalletConnection } from './Wallet';\nimport { useGlobalState } from '../utils/state';\nimport { WALLET, URL_FAUCET } from '../constants';\n\nconst BorrowerPanel = () => (\n  <div>\n    <H4>How to Borrow Money</H4>\n    <p className={Classes.RUNNING_TEXT}>\n      Applying for loans is simple and can be done in three easy steps:\n    </p>\n    <ol>\n      <li>Click on &quot;Apply&quot; under the &quot;Borrow menu&quot; item </li>\n      <li>Fill in the loan application form (and pay the loan application fee) </li>\n      <li>Once we match you with a lender, funds will be sent directly to your account.</li>\n    </ol>\n  </div>\n);\n\nconst GuarantorPanel = () => (\n  <div>\n    <H4>How To Provide Collateral For Profit</H4>\n    <p className={Classes.RUNNING_TEXT}>\n      A Guarantor provides collateral for a given loan request and receives a significant portion of\n      the interest charged on the loan as payment.\n    </p>\n    <ol>\n      <li>Click on &quot;Provide Collateral&quot; under the &quot;Lend menu&quot; item </li>\n      <li>Select one of the available loans </li>\n      <li>Fill in the Guarantee Loan form</li>\n    </ol>\n  </div>\n);\n\nconst LenderPanel = () => (\n  <div>\n    <H4>How To Provide Debt Finance For Profit</H4>\n    <p className={Classes.RUNNING_TEXT}>\n      As a lender, you have a great opportunity to earn a relatively-risk-free return on investment\n      by lending money for fully collaterized loans.\n    </p>\n    <ol>\n      <li>Click on &quot;Lend&quot; under the &quot;Lend menu&quot; item </li>\n      <li>Select one of the available loans </li>\n      <li>Fill in the Lend Loan form</li>\n    </ol>\n  </div>\n);\n\nexport const Home = (): JSX.Element => {\n  const [wallet] = useGlobalState(WALLET);\n  return (\n    <div className=\"column\">\n      <H3>Welcome to Kenya Loans</H3>\n      <p>\n        Searching for a good loan in today&apos;s economic conditions is difficult. KenyaLoans\n        matches borrowers with accessible and affordable loans.\n      </p>\n      <p>\n        Our mission is to ensure equitable access to financing to absolutely everyone in the world.\n      </p>\n      <H3>How Does It Work</H3>\n      <Tabs id=\"tabs\">\n        <Tab id=\"Borrower\" title=\"Borrower\" panel={<BorrowerPanel />} />\n        <Tab id=\"Guarantor\" title=\"Guarantor\" panel={<GuarantorPanel />} />\n        <Tab id=\"Lender\" title=\"Lender\" panel={<LenderPanel />} />\n      </Tabs>\n      {!wallet || !wallet._publicKey ? (\n        <React.Fragment>\n          <H5>Connect your wallet to begin</H5>\n          <WalletConnection />\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          <H5>Get Test Token Accounts</H5>\n          <p>This will ensure you can more easily test the system.</p>\n          <Link to={URL_FAUCET}>\n            <Button type=\"button\" icon=\"wrench\" intent=\"success\" minimal={true} small={true}>\n              Generate Test Accounts\n            </Button>\n          </Link>\n        </React.Fragment>\n      )}\n      <Callout intent=\"warning\">\n        Kenya Loans is only available on the devnet Solana network as it is still in development.\n      </Callout>\n      <hr />\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  Account,\n  Connection,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport { Redirect } from 'react-router-dom';\nimport { Button, H3, Callout, H4 } from '@blueprintjs/core';\nimport { Formik, Form, Field, FieldArray, ErrorMessage } from 'formik';\nimport { AccountLayout } from '@solana/spl-token';\nimport type { WalletType } from '../utils/state';\nimport type { Result } from '../utils/types';\nimport { failure } from '../utils/types';\nimport { signAndSendTransaction } from '../utils/transaction';\nimport { TOKEN_PROGRAM_ID, initializeAccount, mintTo } from '../utils/token';\nimport { useGlobalState } from '../utils/state';\nimport { CONNECTION, WALLET, URL_APPLY } from '../constants';\nimport { CONNECT_TO_WALLET } from '../lang';\nimport { AppToaster } from './toast';\n\ninterface CreateMintParams {\n  connection: Connection;\n  wallet: WalletType /**Wallet for paying fees and allowed to mint new tokens*/;\n  mint: PublicKey /** Account to hold token information*/;\n  initialAccounts: Array<{\n    account: Account;\n    amount: number;\n  }>;\n}\n\nexport const createMintAccounts = async (\n  params: CreateMintParams\n): Promise<Result<TransactionSignature>> => {\n  const { connection, wallet, mint, initialAccounts } = params;\n  const transaction = new Transaction();\n\n  let minAmount: number;\n  try {\n    minAmount = await connection.getMinimumBalanceForRentExemption(AccountLayout.span);\n  } catch (error) {\n    return failure(error);\n  }\n\n  const signers: Account[] = [];\n\n  initialAccounts.forEach((item) => {\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: wallet.publicKey,\n        newAccountPubkey: item.account.publicKey,\n        lamports: minAmount,\n        space: AccountLayout.span,\n        programId: TOKEN_PROGRAM_ID,\n      })\n    );\n    signers.push(item.account);\n    transaction.add(\n      initializeAccount({\n        account: item.account.publicKey,\n        mint,\n        owner: wallet.publicKey,\n      })\n    );\n    transaction.add(\n      mintTo({\n        mint: mint,\n        destination: item.account.publicKey,\n        amount: item.amount,\n        mintAuthority: wallet.publicKey,\n      })\n    );\n  });\n\n  return await signAndSendTransaction(connection, transaction, wallet, signers);\n};\n\nexport const TestGen = (): JSX.Element => {\n  const [wallet] = useGlobalState(WALLET);\n  const [connection] = useGlobalState(CONNECTION);\n  const [ifDoneHere, setIfDoneHere] = React.useState<boolean>(false);\n\n  const initialValues = {\n    mint: '',\n    accounts: [\n      {\n        amount: 133337,\n      },\n      {\n        amount: 133337,\n      },\n      {\n        amount: 133337,\n      },\n      {\n        amount: 133337,\n      },\n      {\n        amount: 133337,\n      },\n    ],\n  };\n\n  if (!wallet || !wallet._publicKey) {\n    return (\n      <div className=\"column\">\n        <span>{CONNECT_TO_WALLET}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"column\">\n      {ifDoneHere && <Redirect to={URL_APPLY} />}\n      <H3>Generate Test Accounts</H3>\n      <Callout intent=\"none\">\n        You can create a new mint accounts using the form below.\n        <br />\n        Use these for testing the lending functionality.\n      </Callout>\n      <hr />\n      <H4>Create a new token accounts and with these balances:</H4>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={async (values, { setSubmitting }) => {\n          const result = await createMintAccounts({\n            connection,\n            initialAccounts: values.accounts.map((item) => {\n              return { account: new Account(), amount: item.amount };\n            }),\n            mint: new PublicKey(values.mint),\n            wallet,\n          });\n          setSubmitting(false);\n          if (result.error) {\n            AppToaster.show({ message: `Error: ${result.error.message}` });\n          } else {\n            AppToaster.show({\n              message: 'Success! Please wait up to 30 seconds for changes to take place.',\n            });\n            setIfDoneHere(true);\n          }\n        }}\n      >\n        {({ isSubmitting, values }) => (\n          <Form>\n            <label htmlFor=\"mint\">Mint Address</label>\n            <Field id=\"mint\" type=\"text\" name=\"mint\" />\n            <p>\n              To get the mint address, you can mint a test token from sollet.io. Paste the Token\n              Address above.\n            </p>\n            <FieldArray name=\"accounts\">\n              {({ remove, push }) => (\n                <div>\n                  {values.accounts.length > 0 &&\n                    values.accounts.map((account, index) => (\n                      <div className=\"row\" key={index}>\n                        <div className=\"column\">\n                          <label htmlFor={`accounts.${index}.amount`}>Account {index + 1}</label>\n                          <Field\n                            name={`accounts.${index}.amount`}\n                            placeholder=\"The amount goes here\"\n                            type=\"number\"\n                          />\n                          <ErrorMessage\n                            name={`accounts.${index}.amount`}\n                            component=\"div\"\n                            className=\"field-error\"\n                          />\n                        </div>\n                        <div className=\"column\">\n                          <Button\n                            type=\"button\"\n                            small={true}\n                            intent=\"danger\"\n                            minimal={true}\n                            className=\"secondary\"\n                            onClick={() => remove(index)}\n                          >\n                            X\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  <Button\n                    type=\"button\"\n                    className=\"secondary\"\n                    small={true}\n                    intent=\"primary\"\n                    onClick={() => push({ amount: 133337 })}\n                  >\n                    Add Account\n                  </Button>\n                </div>\n              )}\n            </FieldArray>\n            <hr />\n            <Button disabled={isSubmitting} type=\"submit\" intent=\"success\" large={true}>\n              Submit\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport { Alignment, Button, Navbar, Menu, MenuItem, H2 } from '@blueprintjs/core';\nimport { Popover2 } from '@blueprintjs/popover2';\nimport {\n  WALLET,\n  URL_HOME,\n  URL_INVESTMENTS,\n  URL_ACCEPT,\n  URL_APPLY,\n  URL_GUARANTEE,\n  URL_REPAY,\n  URL_LOANS,\n  URL_MY_LOANS,\n  URL_FAUCET,\n} from './constants';\nimport { PROGRAM_ID, SOLANA_NETWORK_URL } from './env';\nimport { useGlobalState } from './utils/state';\nimport {\n  Accept,\n  AcceptLoans,\n  Apply,\n  Guarantee,\n  GuaranteeLoans,\n  Home,\n  Investments,\n  Loans,\n  MyLoans,\n  Repay,\n  WalletConnection,\n} from './components';\nimport { TestGen } from './components/testgen';\nimport { LoanStatus } from './components/loans/helpers';\n\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport 'milligram/dist/milligram.css';\n\n/**\n * Main app\n */\nexport default function App(): JSX.Element {\n  const [wallet] = useGlobalState(WALLET);\n\n  const borrowMenu = (\n    <Menu>\n      <Link to={URL_APPLY} style={{ textDecoration: 'none', display: 'block' }}>\n        <MenuItem icon=\"import\" text=\"Apply\" />\n      </Link>\n      {PROGRAM_ID && wallet && wallet._publicKey && (\n        <Link to={URL_MY_LOANS} style={{ textDecoration: 'none', display: 'block' }}>\n          <MenuItem icon=\"stacked-chart\" text=\"My Loans\" />\n        </Link>\n      )}\n    </Menu>\n  );\n\n  const lenderMenu = (\n    <Menu>\n      <Link to={URL_GUARANTEE} style={{ textDecoration: 'none', display: 'block' }}>\n        <MenuItem icon=\"export\" text=\"Provide Collateral\" />\n      </Link>\n      <Link to={URL_ACCEPT} style={{ textDecoration: 'none', display: 'block' }}>\n        <MenuItem icon=\"endorsed\" text=\"Lend\" />\n      </Link>\n      {wallet && wallet._publicKey && (\n        <Link to={URL_INVESTMENTS} style={{ textDecoration: 'none', display: 'block' }}>\n          <MenuItem icon=\"timeline-line-chart\" text=\"My Investments\" />\n        </Link>\n      )}\n      <Link to={URL_LOANS} style={{ textDecoration: 'none', display: 'block' }}>\n        <MenuItem icon=\"database\" text=\"All Loans\" />\n      </Link>\n    </Menu>\n  );\n\n  return (\n    <div className=\"container\" style={{ maxWidth: '720px' }}>\n      <div className=\"row\">\n        <div className=\"column\">\n          <Navbar style={{ marginBottom: '2rem' }}>\n            <Navbar.Group align={Alignment.LEFT}>\n              <Navbar.Heading>\n                <H2>\n                  <Link to={URL_HOME} style={{ textDecoration: 'none' }}>\n                    Kenya Loans\n                  </Link>\n                </H2>\n              </Navbar.Heading>\n            </Navbar.Group>\n            <Navbar.Group align={Alignment.RIGHT}>\n              <Popover2 content={borrowMenu} placement=\"auto\">\n                <Button icon=\"import\" text=\"Borrow\" minimal={true} small={true} />\n              </Popover2>\n              <Popover2 content={lenderMenu} placement=\"auto\">\n                <Button icon=\"timeline-line-chart\" text=\"Lend\" minimal={true} small={true} />\n              </Popover2>\n              <span className=\"bp3-navbar-divider\"></span>\n              <WalletConnection network={SOLANA_NETWORK_URL} />\n            </Navbar.Group>\n          </Navbar>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"column\">\n          <div className=\"row\">\n            <Switch>\n              <Route path={URL_HOME} exact={true}>\n                <Home />\n              </Route>\n              <Route path={URL_FAUCET}>\n                <TestGen />\n              </Route>\n              <Route path={URL_APPLY}>\n                <Apply />\n              </Route>\n              {PROGRAM_ID && wallet && wallet._publicKey && (\n                <Route path={URL_MY_LOANS}>\n                  <Loans\n                    Component={MyLoans}\n                    filters={{ initializer: wallet.publicKey.toBase58() }}\n                    loanProgramId={PROGRAM_ID}\n                  />\n                </Route>\n              )}\n              <Route path={`${URL_ACCEPT}/:loanId`}>\n                <Accept />\n              </Route>\n              <Route path={`${URL_GUARANTEE}/:loanId`}>\n                <Guarantee />\n              </Route>\n              <Route path={`${URL_REPAY}/:loanId`}>\n                <Repay />\n              </Route>\n              {PROGRAM_ID && (\n                <React.Fragment>\n                  <Route path={URL_LOANS}>\n                    <Loans\n                      filters={{ excludeStatus: [LoanStatus.Repaid] }}\n                      loanProgramId={PROGRAM_ID}\n                    />\n                  </Route>\n                  <Route path={URL_GUARANTEE}>\n                    <Loans\n                      Component={GuaranteeLoans}\n                      filters={{ status: [LoanStatus.Initialized] }}\n                      loanProgramId={PROGRAM_ID}\n                    />\n                  </Route>\n                  <Route path={URL_ACCEPT}>\n                    <Loans\n                      Component={AcceptLoans}\n                      filters={{ status: [LoanStatus.Guaranteed] }}\n                      loanProgramId={PROGRAM_ID}\n                    />\n                  </Route>\n                  {wallet && wallet._publicKey && (\n                    <Route path={URL_INVESTMENTS}>\n                      <Loans\n                        Component={Investments}\n                        filters={{\n                          investor: wallet.publicKey.toBase58(),\n                        }}\n                        loanProgramId={PROGRAM_ID}\n                      />\n                    </Route>\n                  )}\n                </React.Fragment>\n              )}\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      })\n      .catch((e) => {\n        throw e;\n      });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Create a client\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport BufferLayout from 'buffer-layout';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n\nconst LAYOUT = BufferLayout.union(BufferLayout.u8('instruction'));\nLAYOUT.addVariant(\n  0,\n  BufferLayout.struct([\n    BufferLayout.u8('decimals'),\n    BufferLayout.blob(32, 'mintAuthority'),\n    BufferLayout.u8('freezeAuthorityOption'),\n    BufferLayout.blob(32, 'freezeAuthority'),\n  ]),\n  'initializeMint'\n);\nLAYOUT.addVariant(1, BufferLayout.struct([]), 'initializeAccount');\nLAYOUT.addVariant(3, BufferLayout.struct([BufferLayout.nu64('amount')]), 'transfer');\nLAYOUT.addVariant(7, BufferLayout.struct([BufferLayout.nu64('amount')]), 'mintTo');\nLAYOUT.addVariant(8, BufferLayout.struct([BufferLayout.nu64('amount')]), 'burn');\nLAYOUT.addVariant(9, BufferLayout.struct([]), 'closeAccount');\n\nconst instructionMaxSpan = Math.max(...Object.values(LAYOUT.registry).map((r: any) => r.span));\n\n/**\n * @param instruction - the instruction to be encoded\n */\nfunction encodeTokenInstructionData(instruction: any): Buffer {\n  const b = Buffer.alloc(instructionMaxSpan);\n  const span = LAYOUT.encode(instruction, b);\n  return b.slice(0, span);\n}\n\ninterface InitializeAccountParams {\n  account: PublicKey;\n  mint: PublicKey;\n  owner: PublicKey;\n}\n\n/**\n * @param params - the parameters to be used for the instruction\n */\nexport function initializeAccount(params: InitializeAccountParams): TransactionInstruction {\n  const { account, mint, owner } = params;\n\n  const keys = [\n    { pubkey: account, isSigner: false, isWritable: true },\n    { pubkey: mint, isSigner: false, isWritable: false },\n    { pubkey: owner, isSigner: false, isWritable: false },\n    { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      initializeAccount: {},\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\ninterface MintToParams {\n  mint: PublicKey;\n  destination: PublicKey;\n  amount: number;\n  mintAuthority: PublicKey;\n}\n\n/**\n * @param params - the parameters to be used for the instruction\n */\nexport function mintTo(params: MintToParams): TransactionInstruction {\n  const { amount, destination, mint, mintAuthority } = params;\n  const keys = [\n    { pubkey: mint, isSigner: false, isWritable: true },\n    { pubkey: destination, isSigner: false, isWritable: true },\n    { pubkey: mintAuthority, isSigner: true, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      mintTo: {\n        amount,\n      },\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\ninterface InitializeMintParams {\n  mint: PublicKey;\n  decimals: number;\n  mintAuthority: PublicKey;\n  freezeAuthority: PublicKey;\n}\n\n/**\n * @param params - the parameters to be used for the instruction\n */\nexport function initializeMint(params: InitializeMintParams): TransactionInstruction {\n  const { mint, decimals, mintAuthority, freezeAuthority } = params;\n  const keys = [\n    { pubkey: mint, isSigner: false, isWritable: true },\n    { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      initializeMint: {\n        decimals,\n        mintAuthority: mintAuthority.toBuffer(),\n        freezeAuthorityOption: !!freezeAuthority,\n        freezeAuthority: freezeAuthority.toBuffer(),\n      },\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n","import {\n  Account,\n  Connection,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport { AccountLayout } from '@solana/spl-token';\nimport BN from 'bn.js';\nimport type { WalletType } from './state';\nimport { APPLICATION_FEE, LE, LOAN, MAX, SINGLE, SINGLE_GOSSIP } from '../constants';\nimport { success, failure } from './types';\nimport type { Result } from './types';\nimport { LOAN_ACCOUNT_DATA_LAYOUT } from './layout';\nimport { initializeAccount, TOKEN_PROGRAM_ID } from './token';\n\n/**\n * @param connection - the connection to the blockchain\n * @param transaction - the transaction to sign and send\n * @param wallet - the wallet (represents the person doing the transaction)\n * @param signers - the accounts to sign the transaction (optional)\n */\nexport async function signAndSendTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  wallet: WalletType,\n  signers: Array<Account> = []\n): Promise<Result<TransactionSignature>> {\n  try {\n    transaction.recentBlockhash = (await connection.getRecentBlockhash(MAX)).blockhash;\n  } catch (error) {\n    return failure(error);\n  }\n\n  transaction.setSigners(\n    // fee payed by the wallet owner\n    wallet.publicKey,\n    ...signers.map((s) => s.publicKey)\n  );\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  try {\n    transaction = await wallet.signTransaction(transaction);\n  } catch (error) {\n    return failure(error);\n  }\n\n  let rawTransaction;\n  try {\n    rawTransaction = transaction.serialize();\n  } catch (error) {\n    return failure(error);\n  }\n\n  let result;\n  try {\n    result = await connection.sendRawTransaction(rawTransaction, {\n      preflightCommitment: SINGLE,\n    });\n  } catch (error) {\n    return failure(error);\n  }\n\n  return success(result);\n}\n\ninterface InitLoanParams {\n  connection: Connection /** represents the current connection */;\n  expectedAmount: number /** the expected loan amount */;\n  loanProgramId: string /** the id of the loan program */;\n  loanMintAccount: string /** the mint account that represents the currency to be used */;\n  wallet: WalletType /** the user wallet to sign and pay for the transaction */;\n}\n\nexport const initLoan = async (params: InitLoanParams): Promise<Result<TransactionSignature>> => {\n  const { connection, expectedAmount, wallet, loanMintAccount, loanProgramId } = params;\n  const loanMintAccountKey = new PublicKey(loanMintAccount);\n  const loanProgramIdKey = new PublicKey(loanProgramId);\n  const transaction = new Transaction();\n\n  // create the token account that will receive the loan if approved\n  const loanReceiveAccount = new Account();\n  try {\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: wallet.publicKey,\n        newAccountPubkey: loanReceiveAccount.publicKey,\n        lamports: await connection.getMinimumBalanceForRentExemption(\n          AccountLayout.span,\n          SINGLE_GOSSIP\n        ),\n        space: AccountLayout.span,\n        programId: TOKEN_PROGRAM_ID,\n      })\n    );\n  } catch (error) {\n    return failure(error);\n  }\n  transaction.add(\n    initializeAccount({\n      account: loanReceiveAccount.publicKey,\n      mint: loanMintAccountKey,\n      owner: wallet.publicKey,\n    })\n  );\n  const signers: Account[] = [loanReceiveAccount];\n\n  // create loan account and make the program the owner\n  const loanAccount = new Account();\n  const applicationFee = APPLICATION_FEE * expectedAmount;\n  try {\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: wallet.publicKey,\n        newAccountPubkey: loanAccount.publicKey,\n        lamports:\n          (await connection.getMinimumBalanceForRentExemption(\n            LOAN_ACCOUNT_DATA_LAYOUT.span,\n            SINGLE_GOSSIP\n          )) + applicationFee,\n        space: LOAN_ACCOUNT_DATA_LAYOUT.span,\n        programId: loanProgramIdKey,\n      })\n    );\n  } catch (error) {\n    return failure(error);\n  }\n  signers.push(loanAccount);\n  // this is the actual init loan transaction\n  try {\n    transaction.add(\n      new TransactionInstruction({\n        programId: loanProgramIdKey,\n        keys: [\n          { pubkey: wallet.publicKey, isSigner: true, isWritable: false },\n          { pubkey: loanMintAccountKey, isSigner: false, isWritable: true },\n          { pubkey: loanReceiveAccount.publicKey, isSigner: false, isWritable: false },\n          { pubkey: loanAccount.publicKey, isSigner: false, isWritable: true },\n          { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n          { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        ],\n        data: Buffer.from(Uint8Array.of(0, ...new BN(expectedAmount).toArray(LE, 8))),\n      })\n    );\n  } catch (error) {\n    return failure(error);\n  }\n\n  return await signAndSendTransaction(connection, transaction, wallet, signers);\n};\n\ninterface GuaranteeLoanParams {\n  connection: Connection /** represents the current connection */;\n  loanMintAccount: string /** the mint account that represents the currency to be used */;\n  loanAccount: string /** the loan account */;\n  loanCollateralAccount: string /** the token account that holds the loan collateral */;\n  loanProgramId: string /** the id of the loan program */;\n  wallet: WalletType /** the user wallet to sign and pay for the transaction */;\n}\n\nexport const guaranteeLoan = async (\n  params: GuaranteeLoanParams\n): Promise<Result<TransactionSignature>> => {\n  const {\n    connection,\n    loanMintAccount,\n    loanAccount,\n    loanCollateralAccount,\n    loanProgramId,\n    wallet,\n  } = params;\n  const loanAccountKey = new PublicKey(loanAccount);\n  const loanMintAccountKey = new PublicKey(loanMintAccount);\n  const loanCollateralAccountKey = new PublicKey(loanCollateralAccount);\n  const loanProgramIdKey = new PublicKey(loanProgramId);\n  const transaction = new Transaction();\n\n  // create the token account that will receive the loan repayment\n  const guarantorTokenAccount = new Account();\n  try {\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: wallet.publicKey,\n        newAccountPubkey: guarantorTokenAccount.publicKey,\n        lamports: await connection.getMinimumBalanceForRentExemption(\n          AccountLayout.span,\n          SINGLE_GOSSIP\n        ),\n        space: AccountLayout.span,\n        programId: TOKEN_PROGRAM_ID,\n      })\n    );\n  } catch (error) {\n    return failure(error);\n  }\n  transaction.add(\n    initializeAccount({\n      account: guarantorTokenAccount.publicKey,\n      mint: loanMintAccountKey,\n      owner: wallet.publicKey,\n    })\n  );\n  const signers: Account[] = [guarantorTokenAccount];\n\n  try {\n    transaction.add(\n      new TransactionInstruction({\n        programId: loanProgramIdKey,\n        keys: [\n          { pubkey: wallet.publicKey, isSigner: true, isWritable: false },\n          { pubkey: loanCollateralAccountKey, isSigner: false, isWritable: true },\n          { pubkey: guarantorTokenAccount.publicKey, isSigner: false, isWritable: true },\n          { pubkey: loanAccountKey, isSigner: false, isWritable: true },\n          { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n          { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        ],\n        data: Buffer.from(Uint8Array.of(1)),\n      })\n    );\n  } catch (error) {\n    return failure(error);\n  }\n\n  return await signAndSendTransaction(connection, transaction, wallet, signers);\n};\n\ninterface AcceptLoanParams {\n  borrowerReceiveAccount: string /** the token account that will receive the loan requested */;\n  connection: Connection /** represents the current connection */;\n  lenderFundsAccount: string /** the token account that holds the loan */;\n  loanAccount: string /** the loan account */;\n  loanProgramId: string /** the id of the loan program */;\n  loanMintAccount: string /** the mint account that represents the currency to be used */;\n  wallet: WalletType /** the user wallet to sign and pay for the transaction */;\n}\n\nexport const acceptLoan = async (\n  params: AcceptLoanParams\n): Promise<Result<TransactionSignature>> => {\n  const {\n    borrowerReceiveAccount,\n    connection,\n    lenderFundsAccount,\n    loanMintAccount,\n    loanAccount,\n    loanProgramId,\n    wallet,\n  } = params;\n  const loanAccountKey = new PublicKey(loanAccount);\n  const borrowerReceiveAccountKey = new PublicKey(borrowerReceiveAccount);\n  const lenderFundsAccountKey = new PublicKey(lenderFundsAccount);\n  const loanMintAccountKey = new PublicKey(loanMintAccount);\n  const loanProgramIdKey = new PublicKey(loanProgramId);\n  const transaction = new Transaction();\n\n  // create the token account that will receive the loan repayment\n  const lenderRepaymentAccount = new Account();\n  try {\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: wallet.publicKey,\n        newAccountPubkey: lenderRepaymentAccount.publicKey,\n        lamports: await connection.getMinimumBalanceForRentExemption(\n          AccountLayout.span,\n          SINGLE_GOSSIP\n        ),\n        space: AccountLayout.span,\n        programId: TOKEN_PROGRAM_ID,\n      })\n    );\n  } catch (error) {\n    return failure(error);\n  }\n  transaction.add(\n    initializeAccount({\n      account: lenderRepaymentAccount.publicKey,\n      mint: loanMintAccountKey,\n      owner: wallet.publicKey,\n    })\n  );\n  const signers: Account[] = [lenderRepaymentAccount];\n\n  try {\n    transaction.add(\n      new TransactionInstruction({\n        programId: loanProgramIdKey,\n        keys: [\n          { pubkey: wallet.publicKey, isSigner: true, isWritable: false },\n          { pubkey: lenderFundsAccountKey, isSigner: false, isWritable: true },\n          { pubkey: lenderRepaymentAccount.publicKey, isSigner: false, isWritable: true },\n          { pubkey: borrowerReceiveAccountKey, isSigner: false, isWritable: true },\n          { pubkey: loanAccountKey, isSigner: false, isWritable: true },\n          { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n          { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        ],\n        data: Buffer.from(Uint8Array.of(2)),\n      })\n    );\n  } catch (error) {\n    return failure(error);\n  }\n\n  return await signAndSendTransaction(connection, transaction, wallet, signers);\n};\n\ninterface RepayLoanParams {\n  collateralTokenAccount: string /** the token account that holds the collateral */;\n  connection: Connection /** represents the current connection */;\n  guarantorAccount: string /** the loan guarantor's account */;\n  guarantorTokenAccount: string /** the guarantor token account to pay fees into */;\n  lenderAccount: string /** the lender's account */;\n  lenderTokenAccount: string /** the lender token account to repay loan + fees into */;\n  loanAccount: string /** the loan account */;\n  loanProgramId: string /** the id of the loan program */;\n  payerTokenAccount: string /** the token account that will be used to repay loan */;\n  wallet: WalletType /** the user wallet to sign and pay for the transaction */;\n}\n\nexport const repayLoan = async (params: RepayLoanParams): Promise<Result<TransactionSignature>> => {\n  const {\n    collateralTokenAccount,\n    connection,\n    guarantorAccount,\n    guarantorTokenAccount,\n    lenderAccount,\n    lenderTokenAccount,\n    loanAccount,\n    loanProgramId,\n    payerTokenAccount,\n    wallet,\n  } = params;\n  const loanAccountKey = new PublicKey(loanAccount);\n  const payerTokenAccountKey = new PublicKey(payerTokenAccount);\n  const collateralTokenAccountKey = new PublicKey(collateralTokenAccount);\n  const guarantorAccountKey = new PublicKey(guarantorAccount);\n  const guarantorTokenAccountKey = new PublicKey(guarantorTokenAccount);\n  const lenderAccountKey = new PublicKey(lenderAccount);\n  const lenderTokenAccountKey = new PublicKey(lenderTokenAccount);\n  const loanProgramIdKey = new PublicKey(loanProgramId);\n  const transaction = new Transaction();\n  // get the program derived address\n  const pda = await PublicKey.findProgramAddress([Buffer.from(LOAN)], loanProgramIdKey);\n\n  try {\n    transaction.add(\n      new TransactionInstruction({\n        programId: loanProgramIdKey,\n        keys: [\n          { pubkey: wallet.publicKey, isSigner: true, isWritable: false },\n          { pubkey: payerTokenAccountKey, isSigner: false, isWritable: true },\n          { pubkey: guarantorAccountKey, isSigner: false, isWritable: true },\n          { pubkey: collateralTokenAccountKey, isSigner: false, isWritable: true },\n          { pubkey: guarantorTokenAccountKey, isSigner: false, isWritable: true },\n          { pubkey: lenderAccountKey, isSigner: false, isWritable: true },\n          { pubkey: lenderTokenAccountKey, isSigner: false, isWritable: true },\n          { pubkey: loanAccountKey, isSigner: false, isWritable: true },\n          { pubkey: pda[0], isSigner: false, isWritable: false },\n          { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        ],\n        data: Buffer.from(Uint8Array.of(3)),\n      })\n    );\n  } catch (error) {\n    return failure(error);\n  }\n\n  const signers: Account[] = [];\n\n  return await signAndSendTransaction(connection, transaction, wallet, signers);\n};\n","export const WALLET_PROVIDER_URL = 'https://www.sollet.io';\nexport const WALLET = 'wallet';\nexport const CONNECT = 'connect';\nexport const CONNECTION = 'connection';\nexport const DISCONNECT = 'disconnect';\nexport const SINGLE = 'single';\nexport const SINGLE_GOSSIP = 'singleGossip';\nexport const LE = 'le';\nexport const BASE10 = 10;\nexport const TIMEOUT = 1000;\nexport const MAX = 'max';\nexport const LOAN = 'loan';\nexport const TOKEN = 'token';\nexport const NONE = 'none';\nexport const APPLICATION_FEE = 0.01;\n\nexport const URL_HOME = '/';\nexport const URL_LOANS = '/loans';\nexport const URL_INVESTMENTS = '/investments';\nexport const URL_MY_LOANS = '/my-loans';\nexport const URL_APPLY = '/apply';\nexport const URL_GUARANTEE = '/collateral';\nexport const URL_ACCEPT = '/accept';\nexport const URL_REPAY = '/repay';\nexport const URL_FAUCET = '/testgen';\n","import BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n *\n * @param property - the property name\n */\nconst publicKey = (property = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for am optiona; public key\n *\n * @param property - the property name\n */\nconst optionalPublicKey = (property = 'optionalPublicKey') => {\n  return BufferLayout.blob(36, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n *\n * @param property - the property name\n */\nconst uint64 = (property = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\nexport const LOAN_ACCOUNT_DATA_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('isInitialized'),\n  BufferLayout.u8('status'),\n  publicKey('initializerPubkey'),\n  publicKey('loanMintPubkey'),\n  publicKey('initializerReceiveLoanPubkey'),\n  optionalPublicKey('guarantorPubkey'),\n  optionalPublicKey('guarantorRepaymentAccountPubkey'),\n  optionalPublicKey('collateralAccountPubkey'),\n  optionalPublicKey('lenderPubkey'),\n  optionalPublicKey('lenderRepaymentPubkey'),\n  uint64('expectedAmount'),\n  uint64('amount'),\n  BufferLayout.u32('interestRate'),\n  BufferLayout.u32('duration'),\n]);\n\nexport interface LoanLayout {\n  isInitialized: number;\n  status: number;\n  initializerPubkey: Uint8Array;\n  loanMintPubkey: Uint8Array;\n  initializerReceiveLoanPubkey: Uint8Array;\n  guarantorPubkey: Uint8Array;\n  guarantorRepaymentAccountPubkey: Uint8Array;\n  collateralAccountPubkey: Uint8Array;\n  lenderPubkey: Uint8Array;\n  lenderRepaymentPubkey: Uint8Array;\n  expectedAmount: Uint8Array;\n  amount: Uint8Array;\n  interestRate: number;\n  duration: number;\n}\n\nexport interface LoanData {\n  isInitialized: boolean;\n  status: number;\n  initializerPubkey: string;\n  loanMintPubkey: string;\n  initializerReceiveLoanPubkey: string;\n  guarantorPubkey?: string;\n  guarantorRepaymentAccountPubkey?: string;\n  collateralAccountPubkey?: string;\n  lenderPubkey?: string;\n  lenderRepaymentPubkey?: string;\n  expectedAmount: number;\n  amount: number;\n  interestRate: number;\n  duration: number;\n}\n"],"sourceRoot":""}